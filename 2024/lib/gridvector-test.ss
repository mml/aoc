(import (chezscheme) (gridvector))

(let ([test-on-test-end-diff
        (lambda (runner)
          (let ([result (test-result-kind runner)])
            (when (eq? result 'fail)
              (let ([err (test-result-ref runner 'actual-error)]
                    [expected (test-result-ref runner 'expected-value)]
                    [actual (test-result-ref runner 'actual-value)])
                (when err
                  (display "Error: ")
                  (write err)
                  (newline))
                (display "Expected: ")
                (write expected)
                (newline)
                (display "Actual:   ")
                (write actual)
                ;(newline)
                ;(display "Diff:     ")
                ;(display-diff expected actual)
                (newline)))))])

  (test-runner-on-test-end! (test-runner-get) test-on-test-end-diff)
  (test-group "make-gv"
    (define w 20)
    (define h 30)
    (let ([gv (make-gv w h)])
      (test-equal w (gv-width gv))
      (test-equal h (gv-height gv)))
    (let ([gv (make-gv w h 'thing)])
      (test-equal w (gv-width gv))
      (test-equal h (gv-height gv))
      (do ([x 0 (add1 x)])
          ((= x w))
        (do ([y 0 (add1 y)])
            ((= y h))
          (test-equal 'thing (gv-ref gv x y)))))
    )
  (test-group "props"
    (define w 30)
    (define h 40)
    (let ([gv (make-gv w h)])
      (do ([x 0 (add1 x)])
          ((= x w))
        (do ([y 0 (add1 y)])
            ((= y h))
          (gv-set! gv x y (* x y))
          (gv-set-prop! gv x y 'eks x)
          (gv-set-prop! gv x y 'wye y)))
      (do ([x 0 (add1 x)])
          ((= x w))
        (do ([y 0 (add1 y)])
            ((= y h))
          (test-assert
            (= (* (gv-prop-value gv x y 'eks)
                  (gv-prop-value gv x y 'wye))
               (gv-ref gv x y)))
          (test-assert
            (= (cdr (gv-propq gv x y 'eks))
               (gv-prop-value gv x y 'eks)))
          (test-assert
            (not (gv-propq gv x y 'nope)))
          (gv-set-prop! gv x y 'eks 'new)
          (test-equal 'new (gv-prop-value gv x y 'eks))))))
  )
